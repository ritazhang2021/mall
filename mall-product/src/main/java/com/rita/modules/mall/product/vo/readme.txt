Object 划分
1.PO(persistant object) 持久对象
PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包
含任何对数据库的操作。
2.DO（Domain Object）领域对象
就是从现实世界中抽象出来的有形或无形的业务实体。
3.TO(Transfer Object) ，数据传输对象(像java数据传给js)
不同的应用程序之间传输的对象
4.DTO（Data Transfer Object）数据传输对象
这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的
数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这
里，泛指用于展示层与服务层之间的数据传输对象。
5.VO(value object) 值对象（像应用程序都是Java）
通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出
的业务对象 , 可以和表对应 , 也可以不 , 这根据业务的需要 。用 new 关键字创建，由
GC 回收的。
可以通过继承或是单建一个类实现,或是反射和代理
View object：视图对象；
接受页面传递来的数据，封装对象
将业务处理完成的对象，封装成页面要用的数据
6.BO(business object) 业务对象
从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对
象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。business object: 业务对象 主要作
用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简
历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经
历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每
个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。7.POJO(plain ordinary java object) 简单无规则 java 对象
传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护
数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增
加别的属性和方法。我的理解就是最基本的 java Bean ，只有属性字段及 setter 和 getter
方法！。
POJO 是 DO/DTO/BO/VO 的统称。
8.DAO(data access object) 数据访问对象
是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久
层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包
含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业
务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作

